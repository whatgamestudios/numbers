// Copyright (c) Whatgame Studios 2024 - 2025
// SPDX-License-Identifier: PROPRIETORY
pragma solidity ^0.8.24;

abstract contract TargetValue {

    uint256 private constant MIN_TARGET_VALUE = 250;
    uint256 private constant MAX_TARGET_VALUE = 1000;


    /**
     * Determine the target value given a game day.
     */
    function getTargetValue(uint32 _gameDay) public pure returns (uint256) {
        return getTarget(_gameDay, MIN_TARGET_VALUE, MAX_TARGET_VALUE);
    }

    function getTarget(uint32 _gameDay, uint256 _low, uint256 _high) private pure returns (uint256) {
        bytes32 seed = generateSeed(_gameDay, 0, 0);
        uint32 count = 0;
        uint256 val;
        do {
            val = getNextValue(seed, count++, _high);
        } while (val < _low);
        return val;
    }


    /**
     * Generate a seed value to generate values from, based on the number of days since 
     * the start of the game epoch, the game being played, and the iteration of the game. 
     *
     * @param _gameDay The day since the start of the game epoch.
     * @param _game The game being played.
     * @param _iteration The iteration of the game being played.
     * @return A seed value to be presented to calls to GetNextValue.
     */
    function generateSeed(uint32 _gameDay, uint32 _game, uint32 _iteration) private pure returns(bytes32) {
        return sha256(abi.encodePacked(_gameDay, _game, _iteration));
    }

    /**
     * Calculate the next value in the sequence.
     *
     * @param _seed Value generated by generateSeed
     * @param _count The value from the sequence to return. This should increase from 0 as a game is played.
     * @param _mod One more than the maximum value that should be returned.
     * @return a value between 0 and _mod
     */
    function getNextValue(bytes32 _seed, uint32 _count, uint256 _mod) private pure returns(uint256) {
        bytes32 raw = sha256(abi.encodePacked(_seed, _count));
        uint32 raw2 = uint32(uint256(raw));
        return (uint256(raw2)) % _mod;
    }

    /// @notice storage gap for additional variables for upgrades
    // slither-disable-start unused-state
    // solhint-disable-next-line var-name-mixedcase
    uint256[100] private __TargetValueGap;
    // slither-disable-end unused-state
}
